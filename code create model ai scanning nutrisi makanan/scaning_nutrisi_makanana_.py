# -*- coding: utf-8 -*-
"""Scaning nutrisi makanana  .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z0OfWbjBA5i2Sek2Xwq4Cr-plchuyGiF

# **Food101 Scaning Nutrisi makanan**
Notebook ini digunakan untuk melakukan inferensi (prediksi makanan) menggunakan model CNN yang sudah ditraining pada dataset Food-101, lalu mengambil data nutrisi dari USDA API.
"""

# Install dependencies
!pip install -q kaggle torch torchvision

# ======================================
# STEP 2: Mount Google Drive
# ======================================
from google.colab import drive
drive.mount('/content/drive')

import os

KAGGLE_JSON = '/content/drive/MyDrive/kaggle.json'
if not os.path.exists(KAGGLE_JSON):
    raise FileNotFoundError('❌ kaggle.json tidak ditemukan di Google Drive!')

!mkdir -p ~/.kaggle
!cp /content/drive/MyDrive/kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
print('✅ Kaggle API siap digunakan.')

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Cek apakah sudah ada di Google Drive
import os
gdrive_dataset_path = '/content/drive/MyDrive/datasets/food-101'
if not os.path.exists(gdrive_dataset_path):
    os.makedirs(gdrive_dataset_path, exist_ok=True)
    # Download dataset asli Food-101
    !wget http://data.vision.ee.ethz.ch/cvl/food-101.tar.gz -O /content/food-101.tar.gz
    # Extract dataset
    !tar -xvzf /content/food-101.tar.gz -C /content/
    # Copy hasil ekstraksi ke Google Drive
    !cp -r /content/food-101 /content/drive/MyDrive/datasets/
    print("✅ Dataset berhasil diunduh dan disimpan ke Google Drive.")
else:
    print("✅ Dataset sudah ada di Google Drive.")

from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split

# Transformasi data
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# ✅ Perbaiki path ke direktori yang benar
dataset_path = '/content/drive/MyDrive/datasets/food-101/images'
full_dataset = datasets.ImageFolder(dataset_path, transform=transform)

# Bagi ke train dan validasi
train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

# Buat DataLoader
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

# Info dataset
print(f'Total data: {len(full_dataset)}, Train: {len(train_dataset)}, Val: {len(val_dataset)}')

import torch
import torch.nn as nn
import torch.nn.functional as F

class SimpleCNN(nn.Module):
    def __init__(self, num_classes=101):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(64 * 54 * 54, 256)
        self.fc2 = nn.Linear(256, num_classes)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 54 * 54)
        x = F.relu(self.fc1(x))
        return self.fc2(x)

DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = SimpleCNN(num_classes=101).to(DEVICE)

optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()

NUM_EPOCHS = 1  # ubah jika ingin lebih lama (misal 10)
model_path = '/content/drive/MyDrive/food101_cnn_model.pth'

if os.path.exists(model_path):
    print('✅ Model sudah ada di Google Drive, skip training.')
else:
    for epoch in range(NUM_EPOCHS):
        model.train()
        total_loss = 0
        for images, labels in train_loader:
            images, labels = images.to(DEVICE), labels.to(DEVICE)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        avg_loss = total_loss / len(train_loader)
        print(f'Epoch [{epoch+1}/{NUM_EPOCHS}], Loss: {avg_loss:.4f}')
    torch.save(model.state_dict(), model_path)
    print(f'✅ Model disimpan di Google Drive: {model_path}')